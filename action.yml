name: "Run ComfyUI on Various OSs"
description: "Run a comfyui workflow on various OSs"
inputs:
  os:
    description: "Operating System. macos, linux, windows."
    required: true
    default: ""
  python_version:
    description: "Python Version. Will be used in the conda install command for pytorch. 3.9 or 3.10. Only valid when os is linux or windows."
    required: false
    default: "3.9"
  cuda_version:
    description: "CUDA Version. Will be used in the conda install command for pytorch. 11.8 or 12.1. Only valid when os is linux or windows."
    required: false
    default: "12.1"
  torch_version:
    description: "Pytorch Version. Will be used in the conda install command for pytorch. 1.10.0 or 1.11.0. Only valid when os is linux or windows."
    required: false
    default: 'stable'
  models-json:
    description: 'JSON string containing models and their download URLs. The models will be downloaded into the exact directory relative to /ComfyUI/models/. eg { "model_name": { url: "https://example.com/model.pth", "directory": "checkpoints" } }'
    required: false
  workflow_filenames:
    description: "The list of workflow filenames is listed in the workflows/ directory. Separate by comma, e.g., 'workflow1.json,workflow2.json'."
    required: true
  comfyui_flags:
    description: "Flags to pass to the comfyui application. eg. --force-fp16"
    required: false
    default: ''
  # Not yet supported
  workflow_raw_json:
    description: "Workflow's raw json file"
    required: false
    default: ''
  timeout:
    description: "Timeout for the workflow (in seconds)"
    required: false
    default: "600"
  google_credentials:
    description: "Service Account JSON for uploading to GCS. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
  gcs_bucket_name:
    description: "Name of the GCS bucket to upload the output files to. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
  output_prefix:
    description: "Prefix for the output files. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
    default: "ComfyUI"
  api_endpoint:
    description: "Comfy Org API endpoint"
    required: false
    default: "https://api.comfy.org/upload-artifact"
runs:
  using: "composite"
  steps:
    - name: '[Universal] Checkout'
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    ############################################################
    ##                      Mac/Linux Steps                   ##
    ##           ______________                               ##
    ##          /             /|              _nnnn_          ##
    ##         /             / |             dGGGGMMb         ##
    ##        /____________ /  |            @p~qp~~qMb        ##
    ##       | ___________ |   |            M|@||@) M|        ##
    ##       ||           ||   |            @,----.JM|        ##
    ##       ||           ||   |           JS^\__/  qKL       ##
    ##       ||           ||   |          dZP        qKRb     ##
    ##       ||___________||   |         dZP          qKKb    ##
    ##       |   _______   |  /         fZP            SMMb   ##
    ##      /|  (_______)  | /          HZM            MMMM   ##
    ##     ( |_____________|/           FqM            MMMM   ##
    ##      \                         __| ".        |\dS"qML  ##
    ##  .=======================.     |    `.       | `' \Zq  ##
    ##  | ::::::::::::::::  ::: |    _)      \.___.,|     .'  ##
    ##  | ::::::::::::::[]  ::: |    \____   )MMMMMP|   .'    ##
    ##  |   -----------     ::: |         `-'       `--'      ##
    ##  `-----------------------'                             ##
    ############################################################
        
    - name: '[Unix] Setup Conda'
      uses: conda-incubator/setup-miniconda@v3
      if: ${{ inputs.os != 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
        auto-activate-base: false
        python-version: ${{ inputs.python_version }}

    - name: '[Unix] Install Comfy-CLI'
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        pip install comfy-cli
        comfy --version
        comfy --skip-prompt --no-enable-telemetry env

    - name: '[Unix-Mac-Only] Install Pytorch nightly'
      if: ${{ inputs.os == 'macos' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio -c pytorch-nightly

    - name: '[Unix-Linux-Only] Install Pytorch'
      if: ${{ inputs.os == 'linux' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version}} -c pytorch -c nvidia

    - name: '[Unix] Check conda environment'
      if: ${{ inputs.os != 'windows' }}
      run: |
        conda info
        conda list
      shell: bash -el {0}

    - name: '[Unix] Install dependencies'
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        which pip3
        pip3 install -r requirements.txt

    - name: '[Unix] Download model'
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        ls "${{ github.workspace }}"
        python3 download-models.py raw '${{ inputs.models-json }}' "${{ github.workspace }}/models/"

    - name: '[Unix] Run Python application in background'
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        python3 main.py --force-fp16 > application.log 2>&1 &

    - name: '[Unix] Get Commit Details'
      id: unix_get_commit_details
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        TIMESTAMP=$(git show -s --format=%cI HEAD^)
        MESSAGE=$(git show -s --format=%s HEAD^)
        COMMIT_HASH=$(git rev-parse HEAD^)
        echo "Commit time: $TIMESTAMP"
        echo "Commit title: $MESSAGE"
        echo "Commit hash: $COMMIT_HASH"
        echo "commit_time=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "commit_title=$MESSAGE" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: '[Unix] Queue Prompts'
      id: unix_queue_prompt
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        echo "Running workflows: $inputs.workflow_filenames"
        python3 queue_prompt.py --comfy_workflow_names $inputs.workflow_filenames --github_action_workflow_name ${{ github.workflow }} --os ${{ runner.os }} --run_id ${{ github.run_id }} --gsc_bucket_name ${{ inputs.gcs_bucket_name }} --workspace_path ${{ github.workspace }} --output_file_prefix output --repo ${{ github.repository }} --commit_hash $COMMIT_HASH --commit_time $TIMESTAMP --commit_message $MESSAGE --branch_name ${{ github.ref_name }} --api_endpoint ${{ inputs.api_endpoint }} 
        
    - name: '[Unix] Debug print out commit timestamp and commit message'
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        echo "Event: ${{ github.event }}"

    - name: '[Unix] Upload log file'
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: app-logs-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/application.log

    - name: '[Unix] Cleanup Repo'
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash -el {0}
      run: rm -rf ${{ github.workspace }}/*

    - name: '[Unix] Cleanup Conda'
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash -el {0}
      run: conda deactivate && conda env remove --name comfyui && conda clean -all


    #####################################################################################
    ##                           Windows Steps (F**k powershell)                       ##
    ##                                                                                 ##
    ##               _.-;;-._      _                                                   ##
    ##        '-..-'|   ||   |    | |                                                  ##
    ##        '-..-'|_.-;;-._|    | |===( )   //////                                   ##
    ##        '-..-'|   ||   |    |_|   |||  | o o|                                    ##
    ##        '-..-'|_.-''-._|           ||| ( c  )                  ____              ##
    ##                                    ||| \= /                  ||   \_            ##
    ##                                     ||||||                   ||     |           ##
    ##                                     ||||||                ...||__/|-"           ##
    ##                                     ||||||             __|________|__           ##
    ##                                       |||             |______________|          ##
    ##                                       |||             || ||      || ||          ##
    ##                                       |||             || ||      || ||          ##
    ##  -------------------------------------|||-------------||-||------||-||-------   ##
    ##                                       |__>            || ||      || ||          ##
    ##                                                                                 ##
    ##                                                                                 ##
    #####################################################################################

    - name: '[Win] Setup Conda'
      uses: conda-incubator/setup-miniconda@v3.0.3
      if: ${{ inputs.os == 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
        python-version: ${{ inputs.python_version }}
      continue-on-error: true

    - name: '[Win-Only] Install Pytorch'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version }} -c pytorch -c nvidia --yes

    - name: "[Win] Check conda environment"
      if: ${{ inputs.os == 'windows' }}
      run: |
        conda info
        conda list
      shell: powershell

    - name: '[Win] Install dependencies'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        Get-Command pip
        pip install -r requirements.txt

    # Keep in mind the self runner must be setup with a model in C:\actions-runner\
    - name: '[Win] Download models'
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        ls "$Env:GITHUB_WORKSPACE"
        cp "C:\actions-runner\v1-5-pruned-emaonly.ckpt" "$Env:GITHUB_WORKSPACE/models/checkpoints"
      shell: powershell

    - name: '[Win] Run Python application quick test'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        python $Env:GITHUB_WORKSPACE/main.py --quick-test-for-ci

    - name: '[Win] Run Python application'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        $envGithubWorkspace = $Env:GITHUB_WORKSPACE
        Write-Output "##############################"
        Write-Output $envGithubWorkspace
        Write-Output "##############################"
        Start-Process powershell -ArgumentList "-File", "${{ github.action_path }}\start-server.ps1", "-GITHUB_WORKSPACE", "`"$envGithubWorkspace`""

    - name: '[Win] Check if the server is running'
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        python poll_server_start.py
      shell: powershell

    - name: '[Win] Queue Prompt'
      id: win_queue_prompt
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        $FULL_PATH="${Env:GITHUB_WORKSPACE}/${{ inputs.workflow_json_path }}"
        Write-Output "Full path to the JSON file: $FULL_PATH"
        $PROMPT_ID = python queue_prompt.py "$FULL_PATH"
        Write-Output "prompt_id=$PROMPT_ID" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "Script output: "
        Write-Output "$PROMPT_ID"

    - name: '[Win] Get start time'
      id: win_start_time
      if: ${{ inputs.os == 'windows' }}
      run: |
        $currentTime = [int][double]::Parse((Get-Date -UFormat "%s"))
        Write-Output "start_time=$currentTime" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "Start time: "
        Write-Output "$currentTime"
      shell: powershell

    - name: '[Win] Check Prompt Status and Get Output Files'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        Write-Output "Prompt ID: ${{ steps.win_queue_prompt.outputs.prompt_id }}"
        python check_prompt_status.py ${{ steps.win_queue_prompt.outputs.prompt_id }} http://localhost:8188/history ${{ inputs.timeout }}

    - name: '[Win] Get end time'
      id: win_end_tim
      if: ${{ inputs.os == 'windows' }}
      run: |
        $currentTime = [int][double]::Parse((Get-Date -UFormat "%s"))
        Write-Output "end_time=$currentTime" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "End time: "
        Write-Output "$currentTime"
      shell: powershell

    - name: '[Win] Auth to GCS'
      uses: "google-github-actions/auth@v2"
      if: ${{ inputs.os == 'windows' }}
      with:
        credentials_json: "${{ inputs.google_credentials }}"

    - name: '[Win] Upload Output Files to GCS'
      if: ${{ success() && inputs.os == 'windows'}}
      id: win_upload-output-files
      uses: google-github-actions/upload-cloud-storage@v2
      with:
        path: ${{ github.workspace }}/output
        destination: ${{ inputs.gcs_bucket_name }}/output-files/${{ github.job }}-${{ inputs.os }}-${{ inputs.workflow_name }}-run${{ github.run_id }}
        glob: "${{ inputs.output_prefix }}*"

    - name: '[Win] Upload log file to GCS'
      if: ${{ ( success() || failure() ) && inputs.os == 'windows'}}
      id: win_upload-log-files
      uses: google-github-actions/upload-cloud-storage@v2
      with:
        path: ${{ github.workspace }}/application.log
        destination: ${{ inputs.gcs_bucket_name }}/logs/${{ github.job }}-${{ inputs.os }}-${{ inputs.workflow_name }}-run${{ github.run_id }}

    - name: '[Win] Debug print out commit timestamp and commit message'
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        Write-Output "Event : ${{ github.event }}"

    - name: '[Win] Get Commit Details'
      id: win_get_commit_details
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        $timestamp = git show -s --format=%cI HEAD^
        $message = git show -s --format=%s HEAD^
        $commit_hash = git rev-parse HEAD^
        Write-Output "Commit time: $timestamp"
        Write-Output "Commit title: $message"
        Write-Output "Commit hash: $commit_hash"
        Write-Output "commit_time=$timestamp" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "commit_title=$message" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "commit_hash=$commit_hash" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

    - name: '[Win] Call API to upload artifact details'
      if: ${{ inputs.os == 'windows' && success() }}
      shell: powershell
      run: |
        $response = Invoke-WebRequest -Uri "${{ inputs.api_endpoint}}" `
          -Method POST `
          -Headers @{"Content-Type"="application/json"} `
          -Body (@{
            "repo" = "${{ github.repository }}"
            "run_id" = "${{ github.run_id }}"
            "os" = "${{ inputs.os }}"
            "cuda_version" = "${{ inputs.cuda_version }}"
            "output_files_gcs_paths" = "${{ steps.win_upload-output-files.outputs.uploaded }}"
            "commit_hash" = "${{ steps.win_get_commit_details.outputs.commit_hash }}"
            "commit_time" = "${{ steps.win_get_commit_details.outputs.commit_time }}"
            "commit_message" = "${{ steps.win_get_commit_details.outputs.commit_title }}"
            "branch_name" = "${{ github.ref_name }}"
            "bucket_name" = "${{ inputs.gcs_bucket_name }}"
            "workflow_name" = "${{ inputs.workflow_name }}"
            "start_time" = ${{ steps.win_start_time.outputs.start_time }}
            "end_time" = ${{ steps.win_end_time.outputs.end_time }}
          } | ConvertTo-Json)

        if ($response.StatusCode -ne 200) {
            Write-Error "API request failed with status code $($response.StatusCode)"
            exit 1
        }

    - name: '[Win] Upload Output Files'
      uses: actions/upload-artifact@v4
      if: ${{ inputs.os == 'windows' && ( success() || failure() ) }}
      with:
        name: output-files-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/output/**

    - name: '[Win] Upload log file'
      uses: actions/upload-artifact@v4
      if: ${{ inputs.os == 'windows' && ( success() || failure() ) }}
      with:
        name: app-logs-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/application.log

    - name: '[Win] Cleanup output files only'
      if: ${{ inputs.os == 'windows' && ( success() || failure() ) }}
      shell: powershell
      run: Remove-Item -Path "${{ github.workspace }}/output/*" -Recurse -Force
