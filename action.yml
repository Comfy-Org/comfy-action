name: "Run ComfyUI on Various OSs"
description: "Run a comfyui workflow on various OSs"
inputs:
  os:
    description: "Operating System. macos, linux, windows."
    required: true
    default: ""
  cuda_version:
    description: "CUDA Version. Will be used in the conda install command for pytorch. 11.8 or 12.1. Only valid when os is linux or windows."
    required: false
    default: "12.1"
  models-json:
    description: 'JSON string containing models and their download URLs. The models will be downloaded into the exact directory relative to /ComfyUI/models/. eg { "model_name": { url: "https://example.com/model.pth", "directory": "checkpoints" } }'
    required: true
  workflow_name:
    description: "Name of the workflow to run. This is used to identify the workflow in the logs."
    required: true
  workflow_json_path:
    description: "Path (relative to the root of the Github repo) of the Workflow JSON to run. Must be API format JSON."
    required: true
  timeout:
    description: "Timeout for the workflow (in seconds)"
    required: false
    default: "600"
runs:
  using: "composite"
  steps:
    ## Common Starting Steps
    - name: Checkout Comfy repository
      uses: actions/checkout@v4

    ## Mac/Linux Steps
    - uses: conda-incubator/setup-miniconda@v3.0.3
      if: ${{ inputs.os != 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
        auto-activate-base: false

    - name: Install Pytorch nightly for macOS.
      if: ${{ inputs.os == 'macos' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio -c pytorch-nightly

    - name: Install Pytorch for compatible CUDA version for Linux.
      if: ${{ inputs.os == 'linux' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version}} -c pytorch -c nvidia
    
    - name: "Check conda environment on Mac/Linux"
      if: ${{ inputs.os != 'windows' }}
      run: |
        conda info
        conda list
      shell: bash -el {0}

    - name: Download models
      if: ${{ inputs.os != 'windows' }}
      run: |
        cd ${{ github.action_path }}
        ls "${{ github.workspace }}"
        pip3 install -r requirements.txt
        python3 download-models.py raw '${{ inputs.models-json }}' "${{ github.workspace }}/models/"
        ls -R "${{ github.workspace }}/models/"
      shell: bash -el {0}

    - name: Install dependencies
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        which pip3
        pip3 install -r requirements.txt
    
    - name: Run Python application
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        python3 main.py --force-fp16 > application.log 2>&1 &

    - name: Check if the server is running
      if: ${{ inputs.os != 'windows' }}
      run: |
        cd ${{ github.action_path }}
        python3 poll_server_start.py
      shell: bash -el {0}

    - name: Queue Prompt
      id: queue_prompt_unix
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        FULL_PATH="${GITHUB_WORKSPACE}/${{ inputs.workflow_json_path }}"
        echo "Full path to the JSON file: $FULL_PATH"
        PROMPT_ID=$(python3 queue_prompt.py "$FULL_PATH" 2>&1)
        echo "prompt_id=$PROMPT_ID" >> $GITHUB_OUTPUT
        echo "Script output: "
        echo "$PROMPT_ID"   
    
    - name: Check Prompt Status and Get Output Files
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        echo "Prompt ID: ${{ steps.queue_prompt_unix.outputs.prompt_id }}"
        python3 check_prompt_status.py ${{ steps.queue_prompt_unix.outputs.prompt_id }} http://localhost:8188/history ${{ inputs.timeout }}

    ## Windows Steps
    - name: Set up Python
      if: ${{ inputs.os == 'windows' }}
      uses: actions/setup-python@v5
      with:
        update-environment: false
        python-version: 3.11
      
    - uses: conda-incubator/setup-miniconda@v3.0.3
      if: ${{ inputs.os == 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
      continue-on-error: true

    - name: Install Pytorch for compatible CUDA version for Windows.
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version }} -c pytorch -c nvidia --yes

    - name: "Check conda environment on Windows"
      if: ${{ inputs.os == 'windows' }}
      run: |
        conda info
        conda list
      shell: powershell

    # Keep in mind the self runner must be setup with a model in
    # C:\actions-runner\
    - name: Download models
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        ls "$Env:GITHUB_WORKSPACE"
        pip install -r requirements.txt
        cp "C:\actions-runner\v1-5-pruned-emaonly.ckpt" "$Env:GITHUB_WORKSPACE/models/checkpoints"
      shell: powershell

    - name: Install dependencies
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        Get-Command pip
        pip install -r requirements.txt

    - name: "Check conda environment on Windows"
      if: ${{ inputs.os == 'windows' }}
      run: |
        conda info
        conda list
      shell: powershell

    - name: Run Python application quick test
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        python $Env:GITHUB_WORKSPACE/main.py --quick-test-for-ci
  
    - name: Run Python application with prompts
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        $envGithubWorkspace = $Env:GITHUB_WORKSPACE
        Write-Output "##############################"
        Write-Output $envGithubWorkspace
        Write-Output "##############################"
        Start-Process powershell -ArgumentList "-File", "${{ github.action_path }}\start-server.ps1", "-GITHUB_WORKSPACE", "`"$envGithubWorkspace`""


    - name: Check if the server is running (Windows)
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        python poll_server_start.py
      shell: powershell

    - name: Queue Prompt (Windows)
      id: queue_prompt_win
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        $FULL_PATH="${Env:GITHUB_WORKSPACE}/${{ inputs.workflow_json_path }}"
        Write-Output "Full path to the JSON file: $FULL_PATH"
        $PROMPT_ID = python queue_prompt.py "$FULL_PATH"
        Write-Output "prompt_id=$PROMPT_ID" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "Script output: "
        Write-Output "$PROMPT_ID"

    - name: Check Prompt Status and Get Output Files (Windows)
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        Write-Output "Prompt ID: ${{ steps.queue_prompt_win.outputs.prompt_id }}"
        python check_prompt_status.py ${{ steps.queue_prompt_win.outputs.prompt_id }} http://localhost:8188/history ${{ inputs.timeout }}

        
     # - name: Run Python application with prompts
    #   if: ${{ inputs.os == 'windows' }}
    #   shell: powershell
    #   run: |
    #     $jsonContent = Get-Content ${{ inputs.workflow_json_path }} -Raw
    #     $command = ""
    #     Start-Process powershell -ArgumentList "-NoProfile", "-Command", "conda activate $envName && python $Env:GITHUB_WORKSPACE/main.py --force-fp16"
    #     Write-Output "##############################"
    #     Write-Output $jsonContent
    #     Write-Output "##############################"
    #     $apiJsonBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($jsonContent))
    #     python $Env:GITHUB_WORKSPACE/main.py --test-ci-with-prompts --prompts-for-ci-test "$apiJsonBase64"
    #     Write-Output python $Env:GITHUB_WORKSPACE/main.py --test-ci-with-prompts --prompts-for-ci-test "$apiJsonBase64"

    # - name: Sleep for debugging windows
    #   if: ${{ inputs.os == 'windows' && failure() }}
    #   run: |
    #     Start-Sleep -Seconds 3600 # Sleeps for 1 hour
    #   shell: powershell

    ## Common Ending Steps
    - name: Upload Output Files
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: output-files-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/output/**

    - name: Upload log file
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: comfy-server-logs-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/application.log

    # - name: Call API to upload artifact details
    #   if: ${{ success() }}
    #   shell: bash
    #   run: |
    #       curl -X POST "http://staging.api.drip.art/upload-artifact" \
    #       -H "Content-Type: application/json" \
    #       -d '{
    #         "repo": "${{ github.repository }}",
    #         "job_id": ${{ github.job }}',
    #         "run_id": "${{ github.run_id }}",
    #         "os": "${{ inputs.os }}",
    #         "cuda_version": "${{ inputs.cuda_version }}",
    #         "artifact_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts",
    #         "commit_hash": "${{ github.sha }}",
    #         "branch_name": "${{ github.ref_name }}"
    #       }'

    ## Mac/Linux Cleanup Steps
    - name: Cleanup
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash
      run: rm -rf ${{ github.workspace }}/*

    - name: Cleanup Conda
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash -el {0}
      run: conda deactivate && conda env remove --name comfyui && conda clean -p

    ## Windows Cleanup Steps
    - name: Cleanup output files only
      if: ${{ inputs.os == 'windows' && ( success() || failure() ) }}
      shell: powershell
      run: Remove-Item -Path "${{ github.workspace }}/output/*" -Recurse -Force