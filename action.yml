name: "Run ComfyUI on Various OSs"
description: "Run a comfyui workflow on various OSs"
inputs:
  os:
    description: "Operating System. macos, linux, windows."
    required: true
    default: ""
  cuda_version:
    description: "CUDA Version. Will be used in the conda install command for pytorch. 11.8 or 12.1. Only valid when os is linux or windows."
    required: false
    default: "12.1"
  models-json:
    description: 'JSON string containing models and their download URLs. The models will be downloaded into the exact directory relative to /ComfyUI/models/. eg { "model_name": { url: "https://example.com/model.pth", "directory": "checkpoints" } }'
    required: true
  workflow_name:
    description: "Name of the workflow to run. This is used to identify the workflow in the logs."
    required: true
  workflow_json_path:
    description: "Path (relative to the root of the Github repo) of the Workflow JSON to run. Must be API format JSON."
    required: true
  timeout:
    description: "Timeout for the workflow (in seconds)"
    required: false
    default: "600"
  google_credentials:
    description: "Service Account JSON for uploading to GCS. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
  gcs_bucket_name:
    description: "Name of the GCS bucket to upload the output files to. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
  output_prefix:
    description: "Prefix for the output files. Required if you want results uploaded to CI dashboard. http://www.comfyci.org"
    required: false
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    ## Mac/Linux Steps
    - uses: conda-incubator/setup-miniconda@v3.0.3
      if: ${{ inputs.os != 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
        auto-activate-base: false

    - name: Install Pytorch nightly for macOS.
      if: ${{ inputs.os == 'macos' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio -c pytorch-nightly

    - name: Install Pytorch for compatible CUDA version for Linux.
      if: ${{ inputs.os == 'linux' }}
      shell: bash -el {0}
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version}} -c pytorch -c nvidia

    - name: "Check conda environment on Mac/Linux"
      if: ${{ inputs.os != 'windows' }}
      run: |
        conda info
        conda list
      shell: bash -el {0}

    # - name: Download models
    #   if: ${{ inputs.os != 'windows' }}
    #   run: |
    #     cd ${{ github.action_path }}
    #     ls "${{ github.workspace }}"
    #     pip3 install -r requirements.txt
    #     python3 download-models.py raw '${{ inputs.models-json }}' "${{ github.workspace }}/models/"
    #     ls -R "${{ github.workspace }}/models/"
    #   shell: bash -el {0}

    - name: Copy model
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        cp "${HOME}/v1-5-pruned-emaonly.ckpt" "${{ github.workspace }}/models/checkpoints/"
        cp "${HOME}/epiNoiseoffset_v2.safetensors" "${{ github.workspace }}/models/loras/"

    - name: Install dependencies
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        which pip3
        pip3 install -r requirements.txt

    - name: Run Python application
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        python3 main.py --force-fp16 > application.log 2>&1 &

    - name: Check if the server is running
      if: ${{ inputs.os != 'windows' }}
      run: |
        cd ${{ github.action_path }}
        python3 poll_server_start.py
      shell: bash -el {0}

    - name: Queue Prompt
      id: queue_prompt_unix
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        FULL_PATH="${GITHUB_WORKSPACE}/${{ inputs.workflow_json_path }}"
        echo "Full path to the JSON file: $FULL_PATH"
        PROMPT_ID=$(python3 queue_prompt.py "$FULL_PATH" 2>&1)
        echo "prompt_id=$PROMPT_ID" >> $GITHUB_OUTPUT
        echo "Script output: "
        echo "$PROMPT_ID"

    - name: Get start time Unix
      id: start_time_unix
      shell: bash
      if: ${{ inputs.os != 'windows' }}
      run: |
        echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Check Prompt Status and Get Output Files
      if: ${{ inputs.os != 'windows' }}
      shell: bash -el {0}
      run: |
        cd ${{ github.action_path }}
        echo "Prompt ID: ${{ steps.queue_prompt_unix.outputs.prompt_id }}"
        python3 check_prompt_status.py ${{ steps.queue_prompt_unix.outputs.prompt_id }} http://localhost:8188/history ${{ inputs.timeout }}

    - name: Get end time Unix
      id: end_time_unix
      shell: bash
      if: ${{ inputs.os != 'windows' }}
      run: |
        echo "end_time=$(date +%s)" >> $GITHUB_OUTPUT

    ## Windows Steps
    - name: Set up Python
      if: ${{ inputs.os == 'windows' }}
      uses: actions/setup-python@v5
      with:
        update-environment: false
        python-version: 3.11

    - uses: conda-incubator/setup-miniconda@v3.0.3
      if: ${{ inputs.os == 'windows' }}
      with:
        auto-update-conda: true
        miniconda-version: latest
        activate-environment: comfyui
      continue-on-error: true

    - name: Install Pytorch for compatible CUDA version for Windows.
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        conda install pytorch torchvision torchaudio pytorch-cuda=${{ inputs.cuda_version }} -c pytorch -c nvidia --yes

    - name: "Check conda environment on Windows"
      if: ${{ inputs.os == 'windows' }}
      run: |
        conda info
        conda list
      shell: powershell

    # Keep in mind the self runner must be setup with a model in
    # C:\actions-runner\
    - name: Download models
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        ls "$Env:GITHUB_WORKSPACE"
        pip install -r requirements.txt
        cp "C:\actions-runner\v1-5-pruned-emaonly.ckpt" "$Env:GITHUB_WORKSPACE/models/checkpoints"
      shell: powershell

    - name: Install dependencies
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        Get-Command pip
        pip install -r requirements.txt

    - name: "Check conda environment on Windows"
      if: ${{ inputs.os == 'windows' }}
      run: |
        conda info
        conda list
      shell: powershell

    - name: Run Python application quick test
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        python $Env:GITHUB_WORKSPACE/main.py --quick-test-for-ci

    - name: Run Python application with prompts
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        $envGithubWorkspace = $Env:GITHUB_WORKSPACE
        Write-Output "##############################"
        Write-Output $envGithubWorkspace
        Write-Output "##############################"
        Start-Process powershell -ArgumentList "-File", "${{ github.action_path }}\start-server.ps1", "-GITHUB_WORKSPACE", "`"$envGithubWorkspace`""

    - name: Check if the server is running (Windows)
      if: ${{ inputs.os == 'windows' }}
      run: |
        cd $Env:GITHUB_ACTION_PATH
        python poll_server_start.py
      shell: powershell

    - name: Queue Prompt (Windows)
      id: queue_prompt_win
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        $FULL_PATH="${Env:GITHUB_WORKSPACE}/${{ inputs.workflow_json_path }}"
        Write-Output "Full path to the JSON file: $FULL_PATH"
        $PROMPT_ID = python queue_prompt.py "$FULL_PATH"
        Write-Output "prompt_id=$PROMPT_ID" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "Script output: "
        Write-Output "$PROMPT_ID"

    - name: Get start time (Windows)
      id: start_time_win
      if: ${{ inputs.os == 'windows' }}
      run: |
        $currentTime = [int][double]::Parse((Get-Date -UFormat "%s"))
        Write-Output "start_time=$currentTime" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "Start time: "
        Write-Output "$currentTime"
      shell: powershell

    - name: Check Prompt Status and Get Output Files (Windows)
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        cd $Env:GITHUB_ACTION_PATH
        Write-Output "Prompt ID: ${{ steps.queue_prompt_win.outputs.prompt_id }}"
        python check_prompt_status.py ${{ steps.queue_prompt_win.outputs.prompt_id }} http://localhost:8188/history ${{ inputs.timeout }}

    - name: Get end time (Windows)
      id: end_time_win
      if: ${{ inputs.os == 'windows' }}
      run: |
        $currentTime = [int][double]::Parse((Get-Date -UFormat "%s"))
        Write-Output "end_time=$currentTime" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "End time: "
        Write-Output "$currentTime"
      shell: powershell

      # - name: Run Python application with prompts
    #   if: ${{ inputs.os == 'windows' }}
    #   shell: powershell
    #   run: |
    #     $jsonContent = Get-Content ${{ inputs.workflow_json_path }} -Raw
    #     $command = ""
    #     Start-Process powershell -ArgumentList "-NoProfile", "-Command", "conda activate $envName && python $Env:GITHUB_WORKSPACE/main.py --force-fp16"
    #     Write-Output "##############################"
    #     Write-Output $jsonContent
    #     Write-Output "##############################"
    #     $apiJsonBase64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($jsonContent))
    #     python $Env:GITHUB_WORKSPACE/main.py --test-ci-with-prompts --prompts-for-ci-test "$apiJsonBase64"
    #     Write-Output python $Env:GITHUB_WORKSPACE/main.py --test-ci-with-prompts --prompts-for-ci-test "$apiJsonBase64"

    # - name: Sleep for debugging windows
    #   if: ${{ inputs.os == 'windows' && failure() }}
    #   run: |
    #     Start-Sleep -Seconds 3600 # Sleeps for 1 hour
    #   shell: powershell

    ## Common Ending Steps
    - uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ inputs.google_credentials }}"

    - name: Upload Output Files to GCS
      if: ${{ success() }}
      id: upload-output-files
      uses: google-github-actions/upload-cloud-storage@v2
      with:
        path: ${{ github.workspace }}/output
        destination: ${{ inputs.gcs_bucket_name }}/output-files/${{ github.job }}-${{ inputs.os }}-${{ inputs.workflow_name }}-run${{ github.run_id }}
        glob: "${{ inputs.output_prefix }}*"

    - name: Upload log file to GCS
      if: ${{ success() || failure() }}
      id: upload-log-files
      uses: google-github-actions/upload-cloud-storage@v2
      with:
        path: ${{ github.workspace }}/application.log
        destination: ${{ inputs.gcs_bucket_name }}/logs/${{ github.job }}-${{ inputs.os }}-${{ inputs.workflow_name }}-run${{ github.run_id }}

    - name: Debug print out commit timestamp and commit message
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        Write-Output "Event : ${{ github.event }}"

    - name: Debug print out commit timestamp and commit message
      if: ${{ inputs.os != 'windows' }}
      shell: bash
      run: |
        echo "Event: ${{ github.event }}"

    - name: Get Commit Details (Mac/Linux)
      id: get_commit_details_unix
      if: ${{ inputs.os != 'windows' }}
      shell: bash
      run: |
        TIMESTAMP=$(git show -s --format=%cI HEAD^)
        MESSAGE=$(git show -s --format=%s HEAD^)
        COMMIT_HASH=$(git rev-parse HEAD^)
        echo "Commit time: $TIMESTAMP"
        echo "Commit title: $MESSAGE"
        echo "Commit hash: $COMMIT_HASH"
        echo "commit_time=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "commit_title=$MESSAGE" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Get Commit Details (Windows)
      id: get_commit_details_win
      if: ${{ inputs.os == 'windows' }}
      shell: powershell
      run: |
        $timestamp = git show -s --format=%cI HEAD^
        $message = git show -s --format=%s HEAD^
        $commit_hash = git rev-parse HEAD^
        Write-Output "Commit time: $timestamp"
        Write-Output "Commit title: $message"
        Write-Output "Commit hash: $commit_hash"
        Write-Output "commit_time=$timestamp" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "commit_title=$message" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
        Write-Output "commit_hash=$commit_hash" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

    - name: Install jq
      uses: dcarbone/install-jq-action@v2.1.0

    - name: Call API to upload artifact details (Mac/Linux)
      if: ${{ inputs.os != 'windows' && success() }}
      shell: bash
      run: |
        payload=$(jq -n \
          --arg repo "${{ github.repository }}" \
          --arg run_id "${{ github.run_id }}" \
          --arg os "${{ inputs.os }}" \
          --arg cuda_version "${{ inputs.cuda_version }}" \
          --arg output_files_gcs_paths "${{ steps.upload-output-files.outputs.uploaded }}" \
          --arg commit_hash "${{ steps.get_commit_details_unix.outputs.commit_hash }}" \
          --arg commit_time "${{ steps.get_commit_details_unix.outputs.commit_time }}" \
          --arg commit_message "${{ steps.get_commit_details_unix.outputs.commit_title }}" \
          --arg branch_name "${{ github.ref_name }}" \
          --arg bucket_name "${{ inputs.gcs_bucket_name }}" \
          --arg workflow_name "${{ inputs.workflow_name }}" \
          --argjson start_time "${{ steps.start_time_unix.outputs.start_time }}" \
          --argjson end_time "${{ steps.end_time_unix.outputs.end_time }}" \
          '{
            repo: $repo,
            run_id: $run_id,
            os: $os,
            cuda_version: $cuda_version,
            output_files_gcs_paths: $output_files_gcs_paths,
            commit_hash: $commit_hash,
            commit_time: $commit_time,
            commit_message: $commit_message,
            branch_name: $branch_name,
            bucket_name: $bucket_name,
            workflow_name: $workflow_name,
            start_time: $start_time,
            end_time: $end_time
          }')
        
        echo "$payload"

        curl -X POST "https://api-frontend-dev-qod3oz2v2q-uc.a.run.app/upload-artifact" \
          -H "Content-Type: application/json" \
          -d "$payload"

    - name: Call API to upload artifact details
      if: ${{ inputs.os == 'windows' && success() }}
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://api-frontend-dev-qod3oz2v2q-uc.a.run.app/upload-artifact" `
          -Method POST `
          -Headers @{"Content-Type"="application/json"} `
          -Body (@{
            "repo" = "${{ github.repository }}"
            "run_id" = "${{ github.run_id }}"
            "os" = "${{ inputs.os }}"
            "cuda_version" = "${{ inputs.cuda_version }}"
            "output_files_gcs_paths" = "${{ steps.upload-output-files.outputs.uploaded }}"
            "commit_hash" = "${{ steps.get_commit_details_win.outputs.commit_hash }}"
            "commit_time" = "${{ steps.get_commit_details_win.outputs.commit_time }}"
            "commit_message" = "${{ steps.get_commit_details_win.outputs.commit_title }}"
            "branch_name" = "${{ github.ref_name }}"
            "bucket_name" = "${{ inputs.gcs_bucket_name }}"
            "workflow_name" = "${{ inputs.workflow_name }}"
            "start_time" = ${{ steps.start_time_win.outputs.start_time }}
            "end_time" = ${{ steps.end_time_win.outputs.end_time }}
          } | ConvertTo-Json)

    - name: Upload Output Files
      uses: actions/upload-artifact@v4
      with:
        name: output-files-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/output/**

    - name: Upload log file
      uses: actions/upload-artifact@v4
      if: ${{ success() || failure() }}
      with:
        name: app-logs-${{ github.job }}-${{ inputs.os }}-${{inputs.workflow_name}}-${{ github.run_id }}
        path: ${{ github.workspace }}/application.log

    # - name: Sleep for 10 minutes on failure
    #   if: ${{ inputs.os != 'windows' && failure() }}
    #   shell: "bash"
    #   run: sleep 600

    # - name: Sleep for 10 minutes on failure
    #   if: ${{ inputs.os == 'windows' && failure() }}
    #   shell: powershell
    #   run: Start-Sleep -Seconds 600

    ## Mac/Linux Cleanup Steps
    - name: Cleanup
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash
      run: rm -rf ${{ github.workspace }}/*

    - name: Cleanup Conda
      if: ${{ inputs.os != 'windows' && ( success() || failure() ) }}
      shell: bash -el {0}
      run: conda deactivate && conda env remove --name comfyui && conda clean -all

    ## Windows Cleanup Steps
    - name: Cleanup output files only
      if: ${{ inputs.os == 'windows' && ( success() || failure() ) }}
      shell: powershell
      run: Remove-Item -Path "${{ github.workspace }}/output/*" -Recurse -Force
